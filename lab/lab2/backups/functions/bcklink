#!/bin/bash

# ██████╗░░█████╗░██╗░░██╗██╗░░░░░██╗███╗░░██╗██╗░░██╗
# ██╔══██╗██╔══██╗██║░██╔╝██║░░░░░██║████╗░██║██║░██╔╝
# ██████╦╝██║░░╚═╝█████═╝░██║░░░░░██║██╔██╗██║█████═╝░
# ██╔══██╗██║░░██╗██╔═██╗░██║░░░░░██║██║╚████║██╔═██╗░
# ██████╦╝╚█████╔╝██║░╚██╗███████╗██║██║░╚███║██║░╚██╗
# ╚═════╝░░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝╚═╝░░╚══╝╚═╝░░╚═╝

# bcklink
#       • Sintaxis
# $ bcklink id path
#       • Funcionalidad
# – Copia el fichero con ruta path con el identificador id en bck
# – Crea un enlace simbólico que apunta desde path al archivo correspondiente id en bck
# – Actualiza el fichero mypaths.txt añadiendo la entrada siguiente id,path
#       • Consideraciones
# – Si el identificador ya existe en bck muestra un mensaje indicándolo y no realiza ninguna acción

# Nombre del archivo de registro
archivo_log="logs/$(date +"%Y-%m-%d").log"

# Solicitamos datos de entrada
source functions/requestData
data
# variables globales
id=$id
path=$path
bck_dir=$bck_dir
bck_files=$bck_files
mypaths_file=$mypaths_file

# Función para mostrar los datos de entrada
dataEntry() {        
    echo "..........................................."
    echo -e "\033[1;36m Variables de entrada: \033[0m"
    echo "- ID: $id"
    echo "- Path: $path"
    echo "- Dir. destino: $bck_dir"
    echo "- Fich. destino: $bck_files"
    echo "- Fichero registro: $mypaths_file"
    echo "..........................................."
}

# Función para verificar si el identificador ya existe en bck
checkId() {    
    # Verificar si el identificador ya existe en bck    
    local rutaFile="$bck_dir/files/"
    local idRutaFile="$rutaFile/$id"    
    if [ -f $idRutaFile ]; then
        echo -e "\033[1;33m El identificador $id ya existe en '$rutaFile'. \033[0m"
        echo ""
        echo -e "\033[1;33m Si desea modificar el identificador del fichero $id. Use la opción 'bckmv' del sistema \033[0m"
        sleep 2
        exit 1
    fi
    echo -e "\033[1;32m Identificador válido \033[0m"
    copyFile $rutaFile $idRutaFile
}

# Función para copiar el archivo a bck y crear el enlace simbólico
copyFile() {    
    # Copiar el archivo a bck con el identificador correspondiente
    echo -e "\033[3;33m Copiando el archivo '$path' a bck con el identificador correspondiente: $id \033[0m"
     
    # echo $rutaFile
    # echo "Datos a copiar:  "
    # echo "Path origen: $path"
    # echo "Path destino: $rutaFile"
    # echo "Dato a escribir en mypaths_file: $id , $(basename $path)"    
    path=$(realpath $(basename $path))
    # echo "Path absoluto de ruta relativa de entrada: $path"
    # Verificar si se encontró el archivo
    if [ ! -z $(basename $path) ]; then
        echo -e "\033[3;32m Archivo '$(basename $path)' encontrado! \033[0m"
        path2=$(find $HOME -xdev -path '/root' -prune -o -name "$(basename $path)") 
        echo $path2 > find.tmp
           
        if [ -s find.tmp ]; then
            nLineasEncontradas=$(wc -l < find.tmp)
            if [ $nLineasEncontradas > 2 ]; then
                # Guardar la línea como una variable
                path2=$(tail -n 1 find.tmp)
                # echo "Resultado encontrado: $path"
                if [ $path != $path2 ]; then
                    path=$path2
                    # echo "Resultado del path nuevo: $path"
                fi
            else
                # Mostrar un mensaje de advertencia si el archivo tiene más de una línea
                echo -e "\033[3;32m Hay más de un resultado encontrado para el fichero introducido, verifique la ruta y vuelva a intentarlo de nuevo. \033[0m"
                tail -n 10 find.tmp
            fi            
        else 
            echo "Sin resultados"
        fi 
        rm find.tmp        
    else
        
        echo -e "\033[3;31m ¡Advertencia! \033[0m"
        echo "El archivo '$path' no se encontró en el sistema."
        echo "Por favor, compruebe la ruta y vuelva a ejecutar de nuevo esta opción"
        read -p "ENTER para continuar" continue
        exit 1        
    fi

    datos="$id,$(basename $path)"

    echo "Valores que de los que haremos backup:"
    echo "Path origen: $path"
    echo "Path destino: $rutaFile"
    echo "Nuevo nombre del fichero: $idRutaFile"
    echo "Dato a escribir en mypaths_file: $datos"    
    cp $path $rutaFile    
    if [ "$?" -ne 0 ]; then
        echo -e "\033[1;31m Error al copiar el fichero a bck_dir. \033[0m"
        exit 1
    else
        datos >> $mypaths_file
    fi
    mv $rutaFile/$(basename $path) $rutaFile
    # Crear el enlace simbólico
    ln -s "$bck_dir/$id" "$path" 
    if [ "$?" -ne 0 ]; then
        echo -e "\033[1;31m Error al crear el enlace simbólico. \033[0m"
        exit 1
    fi
    # Actualizar el archivo mypaths.txt
    echo "$id,$path" >> "$mypaths_file" || { echo -e "\033[1;33m Error al actualizar fichero mypaths.txt \033[0m"; exit 1; }

    echo -e "\033[1;32m Fichero copiado a bck y enlace simbólico creado con éxito. \033[0m"
    tail -n 10 "$mypaths_file"
}

# Ejecutar las funciones
dataEntry 2>&1 | tee -a "$archivo_log"
checkId 2>&1 | tee -a "$archivo_log"
